PROGRAM MODES:
-------------------------------------------------------------------------------
1) FILE TEST MODE
   - Odczyt danych z pliku, jednorazowe posortowanie, zapis wyniku

   Usage:
     ./projektAizo --file <algorithm> <type> [--pivot <0..3>] [--gap <0..1>] [--drunk <p>] <inputFile> [outputFile]

   Gdzie:
     <> <- obowiązkowy parametr
     [] <- opcjonalny parametr
     -- <- trzeba podać typ parametru podczas wprowadzania

     <algorithm>  ID wybranego algorytmu sortowania:

                  0 - Insert
                  1 - Heap
                  2 - Shell
                  3 - Quick
                  4 - InsertDrunk

     <type>       Typ danych do wczytania i posortowania:

                  0 - int
                  1 - float
                  2 - tablica char[]
                  3 - planszówka

     --pivot <0..3>       Sposób wyboru pivota (tylko dla QuickSort):

                          0 - pierwszy element
                          1 - środkowy element
                          2 - ostatni element
                          3 - losowy element

     --gap <0..1>         Wybór metody generowania odstępów (tylko dla ShellSort):
``
                          0 - Shell'a 1959
                          1 - Frank'a, Lazarus'a 1960

     --drunk <p>          Wersja „pijanego studenta”, czyli dodatkowy parametr
                          losowego zaburzania sortowania. Im wyższa wartość p,
                          tym większa szansa na „psucie” porządku.
                          Stosowane tylko w algorytmach z sufiksem „Drunk”.

     <inputFile>  Nazwa pliku z danymi do posortowania znajdującego się w folderze input.

     [outputFile] opcjonalnie nazwa pliku wyjściowego, do którego zapisane zostaną posortowane dane w folderze output.
                  Brak argumentu ustawi nazwę tego pliku na [<inputFile> + OUT].txt.

-------------------------------------------------------------------------------
2) BENCHMARK MODE
   - Wielokrotne testy sortowania na danych generowanych w locie; wyniki są
     zapisywane do pliku (czas, min, max, odchylenie standardowe, itp.)

   Usage:
        ./projektAizo --file <algorithm> <type> [--pivot <0..3>] [--gap <0..1>] [--drunk <p>] [--distribution <distType>] [--runs <N>] [outputFile]

      Gdzie:
        <> <- obowiązkowy parametr
        [] <- opcjonalny parametr
        -- <- trzeba podać typ parametru podczas wprowadzania

        <algorithm>  ID wybranego algorytmu sortowania:

                     0 - Insert
                     1 - Heap
                     2 - Shell
                     3 - Quick
                     4 - InsertDrunk

        <type>       Typ danych do wczytania i posortowania:

                     0 - int
                     1 - float
                     2 - tablica char[]
                     3 - planszówka

        --pivot <0..3>       Sposób wyboru pivota (tylko dla QuickSort):

                             0 - pierwszy element
                             1 - środkowy element
                             2 - ostatni element
                             3 - losowy element

        --gap <0..1>         Wybór metody generowania odstępów (tylko dla ShellSort):

                             0 - Shell'a 1959
                             1 - Frank'a, Lazarus'a 1960

        --drunk <p>          Wersja „pijanego studenta”, czyli dodatkowy parametr
                             losowego zaburzania sortowania. Im wyższa wartość p,
                             tym większa szansa na „psucie” porządku.
                             Stosowane tylko w algorytmach z sufiksem „Drunk”.

        --distribution <distType>   Rodzaj rozkładu początkowego danych:

                             0 - losowy
                             1 - rosnący
                             2 - malejący
                             3 - posortowany częściowo w 33%
                             4 - posortowany częściowo w 66%

        --runs <N>           Liczba powtórzeń w celu uśrednienia wyników
                                  (np. 100, aby uzyskać miarodajne wyniki).

        [outputFile] opcjonalnie nazwa pliku wyjściowego, do którego zapisane zostaną posortowane dane w folderze output.
                     Brak argumentu ustawi nazwę tego pliku na [wprowadzone parametry].txt.

-------------------------------------------------------------------------------
3) HELP MODE
   - Wyświetlenie niniejszej pomocy

   Usage:
     ./projektAizo --help

   - Program również wyświetli tę wiadomość, jeśli nie zostaną podane żadne
     argumenty wejściowe.

-------------------------------------------------------------------------------
UWAGI DODATKOWE (WERSJA 5.5):
-pliki wejściowe i wyjściowe domyślnie będą w folderach odpowiednio /input, /output

-------------------------------------------------------------------------------
EXAMPLE CALLS:

FILE TEST MODE:
1) InsertSort (algorithm=0), typ int (type=0), wczytanie z pliku intData.txt
   i zapis do intDataSorted.txt:
   ./projektAizo --file 0 0 intData.txt intDataSorted.txt

2) QuickSort (algorithm=3), typ float (type=1), pivot = ostatni element (pivot=2),
   wczytanie z pliku floats.txt, brak podanego pliku wyjściowego:
   ./projektAizo --file 3 1 --pivot 2 floats.txt

3) InsertDrunk (algorithm=4), typ boardGame (type=3), parametr p=5 (drunk=5),
   wczytanie z pliku boardgames.txt i zapis do boardgamesOut.txt:
   ./projektAizo --file 4 3 --drunk 5 boardgames.txt boardgamesOut.txt


BENCHMARK MODE:
1) InsertSort (algorithm=0), typ int (type=0), losowy rozkład (distribution=0),
   100 powtórzeń (runs=100), brak pliku wyjściowego:
   ./projektAizo --test 0 0 --distribution 0 --runs 100

2) QuickSort (algorithm=3), typ float (type=1), pivot losowy (pivot=3),
   rozkład malejący (distribution=2), 50 powtórzeń (runs=50),
   zapis do bench_floats.txt:
   ./projektAizo --test 3 1 --pivot 3 --distribution 2 --runs 50 bench_floats.txt

3) ShellSort (algorithm=2), typ tablica char[] (type=2), gap=1 (Frank'a, Lazarus'a 1960),
   rozkład częściowo posortowany w 66% (distribution=4), 30 powtórzeń (runs=30),
   zapis do bench_strings.txt:
   ./projektAizo --test 2 2 --gap 1 --distribution 4 --runs 30 bench_strings.txt

-------------------------------------------------------------------------------